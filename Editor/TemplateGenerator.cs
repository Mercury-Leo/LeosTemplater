using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Tools.Editor.Templater;
using UnityEditor;
using UnityEngine;

[InitializeOnLoad]
public static class TemplateGenerator
{
    private static string _menuItemsPath;
    private static readonly string MenuItemsPath = _menuItemsPath ?? GetMenuItemsPath();

    private const string MenuItemsClassName = "TemplatesMenuItems.cs";
    private const string CreationPath = "Assets/Create/Templates/";

    private const string Header =
        @"//Auto generated Code, do not change!
//Generated by Leo's Templater 
using System.IO;
using UnityEditor;
    
namespace Tools.Editor.Templater
{
    internal sealed class TemplateMenuItems
    {
";

    private const string Footer = @"
    }
}";

    static TemplateGenerator()
    {
        EditorApplication.projectChanged += OnProjectChanged;
    }

    private static string GetMenuItemsPath()
    {
        var packagePath = TemplaterUtility.FindPackageFolder(nameof(TemplateGenerator));
        if (string.IsNullOrEmpty(packagePath))
        {
            Debug.LogError("Failed to find package path");
            return Application.dataPath;
        }

        return Path.Combine(packagePath, MenuItemsClassName).FixSlashes();
    }

    public static void Regenerate()
    {
        GenerateMenuItems(GetAllTemplates());
    }

    private static void OnProjectChanged()
    {
        var files = GetAllTemplates().ToHashSet();

        if (!File.Exists(MenuItemsPath))
        {
            GenerateMenuItems(files);
        }

        if (TemplatesUpdated(files))
        {
            GenerateMenuItems(files);
        }
    }

    private static void GenerateMenuItems(IEnumerable<string> files)
    {
        var builder = new StringBuilder();
        if (!string.IsNullOrEmpty(TemplaterSettings.instance.Header))
        {
            builder.Append("/*");
            builder.Append(TemplaterSettings.instance.Header);
            builder.Append("*/");
        }

        builder.Append(Header);

        foreach (var file in files)
        {
            builder.AppendLine(GenerateMenuItemCode(file));
        }

        builder.Append(Footer);

        if (!string.IsNullOrEmpty(TemplaterSettings.instance.Footer))
        {
            builder.Append("/*");
            builder.Append(TemplaterSettings.instance.Footer);
            builder.Append("*/");
        }

        try
        {
            File.WriteAllText(MenuItemsPath, builder.ToString());
        }
        catch (Exception e)
        {
            Debug.LogError($"Failed to write to {MenuItemsPath}: {e}");
        }
    }

    private static string GenerateMenuItemCode(string filePath, int priority = 40)
    {
        var path = filePath.FixSlashes();
        var itemName = Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(path));
        var itemClass = itemName + "Class.cs";

        return $@"   
        [MenuItem(""{CreationPath}{itemName}"", priority = {priority})]
        public static void Create{itemName}MenuItem()
        {{
            if (!File.Exists(""{path}""))
            {{
                return;
            }}
            ProjectWindowUtil.CreateScriptAssetFromTemplateFile(""{path}"", ""{itemClass}"");
        }}";
    }

    private static bool TemplatesUpdated(IEnumerable<string> files)
    {
        var currentHash = TemplatesHash.HashFiles(files);
        var storedHash = TemplatesHash.GetHash();

        var hasUpdated = currentHash != storedHash;
        if (hasUpdated)
        {
            TemplatesHash.SetHash(currentHash);
        }

        return hasUpdated;
    }

    private static IEnumerable<string> GetAllTemplates()
    {
        return Directory.GetFiles(TemplaterSettings.instance.TemplateFolder, "*.txt", SearchOption.AllDirectories);
    }
}